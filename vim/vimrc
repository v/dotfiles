" Compatibility
set nocompatible

" Filetypes
filetype off

" Backups {{{
    set backup                        " enable backups
    set noswapfile                    " it's 2013, Vim.

    set backupdir=~/.vim/tmp/backup/ " backups
    set directory=~/.vim/tmp/swap/   " swap files

    if has('persistent_undo')
        set undodir=~/.vim/tmp/undo/     " undo files


        " Make those folders automatically if they don't already exist.
        if !isdirectory(expand(&undodir))
            call mkdir(expand(&undodir), "p")
        endif
    endif

    if !isdirectory(expand(&backupdir))
        call mkdir(expand(&backupdir), "p")
    endif
    if !isdirectory(expand(&directory))
        call mkdir(expand(&directory), "p")
    endif

" }}}

call plug#begin('~/.vim/plugged')

" All the plugins
Plug 'bling/vim-airline'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-fugitive'
Plug 'scrooloose/nerdcommenter'
Plug 'majutsushi/tagbar'
Plug 'xsbeats/vim-blade'
Plug 'itspriddle/vim-stripper'
Plug 'pangloss/vim-javascript'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'airblade/vim-gitgutter'
Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'mattn/webapi-vim'
Plug 'yssl/QFEnter'
Plug 'tpope/vim-unimpaired'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'rking/ag.vim'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'mdempsky/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }
Plug 'psf/black'
Plug 'neoclide/coc.nvim', {'branch': 'release'}


Plug 'zchee/deoplete-go', { 'do': 'make'}
Plug 'sgur/vim-editorconfig'
Plug 'rhysd/vim-clang-format'
Plug 'hashivim/vim-terraform'
Plug 'peitalin/vim-jsx-typescript'
Plug 'tpope/vim-abolish'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'elzr/vim-json'
Plug 'mogelbrod/vim-jsonpath'


" All the colorschemes.
Plug 'flazz/vim-colorschemes'
Plug 'sjl/badwolf'
Plug 'YorickPeterse/Autumn.vim'
Plug 'nanotech/jellybeans.vim'
Plug 'tomasr/molokai'
Plug 'altercation/vim-colors-solarized'
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'junegunn/seoul256.vim'
Plug 'dense-analysis/ale'
Plug 'elixir-editors/vim-elixir'



filetype plugin indent on
call plug#end()

let mapleader=","

" Colorscheme Settings
syntax on
set synmaxcol=800
set t_Co=256
set background=dark

try
    colorscheme molokai
    let g:seoul256_background = 233
    colorscheme seoul256
catch /^Vim\%((\a\+)\)\=:E185/
endtry

"Indentation settings
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent
set smarttab
set hidden

"Statusline settings"
set laststatus=2
"let g:Powerline_symbols='fancy'
let g:Powerline_cache_enabled=1
" Formatting
set formatoptions=croqn1
silent! set formatoptions+=j
set nojoinspaces


"Convenience mappings"
inoremap jj <Esc>`^
inoremap JJ <Esc>`^
inoremap jk <Esc>`^
inoremap JK <Esc>`^
cnoremap w!! %!sudo tee > /dev/null %
nnoremap J mzJ`z

" Search for work under cursor wth Ag
nnoremap K :Ag "\b<C-R><C-W>\b"<CR>:cw<CR>
nnoremap ( /n \<<C-R><C-W>\><CR>

"Reasonable line movement"
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

nnoremap <c-h> :Ag <c-r><c-w>

" Matching
silent! runtime macros/matchit.vim

" Netrw
if has("eval")
    let g:netrw_silent = 1
    let g:netrw_liststyle = 3
endif

"Get rid of annoying bell sound"
set noerrorbells visualbell t_vb=

"NERDTree settings"
let NERDTreeIgnore=['\.pyc$', '\~$', '\.rbc$']
let NERDTreeMinimalUI=1
let NERDTreeDirArrows=1

" Messages
set shortmess+=I

" Miscellaneous
set backspace=indent,eol,start
set modelines=0
set report=0

set number
set mouse=r

" Objects
onoremap ir i[
onoremap ar a[
vnoremap ir i[
vnoremap ar a[

" Paste
set nopaste
set pastetoggle=<F2>

" Reading
set autoread

" Scrolling
set scrolloff=5
set sidescrolloff=16

" Search
if has("extra_search")
    set incsearch
    set ignorecase
    set smartcase
    set nohlsearch
    nnoremap <leader>h :set hlsearch!<CR>
    nnoremap <leader>i :set incsearch!<CR>
    nnoremap <C-l> :nohlsearch<CR><C-l>
endif

" Spelling
if has("spell")
    set spelllang=en_us
    nnoremap <leader>s :setlocal spell!<CR>
endif


" Terminal
set ttyfast
set visualbell t_vb=

" Typos
if has("user_commands")
    command! -bang -complete=file -nargs=? E e<bang> <args>
    command! -bang -complete=file -nargs=? W w<bang> <args>
    command! -bang -complete=file -nargs=? WQ wq<bang> <args>
    command! -bang -complete=file -nargs=? Wq wq<bang> <args>
    command! -bang Q q<bang>
    command! -bang Qa qa<bang>
    command! -bang QA qa<bang>
    command! -bang Wa wa<bang>
    command! -bang WA wa<bang>
endif

if &diff
    colorscheme jellybeans
    let g:lite_dfm_normal_bg_cterm=237
    nnoremap qq :qa<cr>
endif
augroup diffopen
    autocmd!
    autocmd FilterWritePre * if &diff | colorscheme jellybeans | endif
augroup end

" Unmaps
noremap <F1> <nop>
nnoremap Q <nop>

" Visual
if has("virtualedit")
    set virtualedit+=block
endif

" Wildmenu
if has("wildmenu")
    set wildmenu
    set wildmode=longest:list
    if has("wildignore")
        set wildignore+=*.a,*.o
        set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png
        set wildignore+=*~,*.swp,*.tmp
        set wildignore+=*.pyc
        set wildignore+=*.class
    endif
    if exists("&wildignorecase")
        set wildignorecase
    endif
endif

" Windows
if has("windows")
    set splitbelow
    if has("vertsplit")
        set splitright
    endif
    if exists("&showtabline")
        set showtabline=1
    endif
endif

" Yanking
nnoremap Y y$

" Local
if filereadable(glob("~/.vimrc.local"))
    source ~/.vimrc.local
endif

" Compile Latex when I save it.
au BufWritePost *.tex "silent !pdflatex %"

map q: <cr>

set completeopt=menuone,longest

let g:Powerline_symbols = 'unicode'
let g:UltiSnipsExpandTrigger="<tab>"

" always open nerd tree in current directory
function! ToggleNerdTree()
    if g:NERDTree.IsOpen()
        NERDTreeToggle
    elseif !empty(expand('%'))
        NERDTree %
    else
        NERDTree
    endif
endfunction

" Leader Keybindings
nnoremap <Leader>n :call ToggleNerdTree()<CR>

nnoremap == <C-w>=

au Filetype python inoremap pdb import pdb; pdb.set_trace()

" open file under cursor in vertical split / tab
nnoremap <Bar> :vertical wincmd f<CR>
nnoremap _ :tab wincmd f<CR>

" splits from quickfix
let g:qfenter_vopen_map = ['<Bar>']

" open/close quickfix easily
if !&diff
    nnoremap qo :copen<cr>
    nnoremap qq :ccl<cr>
endif

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
endif

let g:ackprg = 'ag --nogroup --nocolor --column'
autocmd BufRead,BufNewFile *.avsc setfiletype json

let hostname = substitute(system('hostname'), '\n', '', '')
nnoremap <C-p> :FZF<cr>
nnoremap <leader>t :GoTestFunc<CR>
nnoremap <leader>m :History<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>f :GoFillStruct<CR>

" Go specific settings

let g:go_fmt_command = "goimports"
let g:go_metalinter_autosave = 0

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  call go#cmd#Build(1)
endf

if has('python')
  command! -nargs=* Py python <args>
elseif has('python3')
  command! -nargs=* Py python3 <args>
endif

" Gets the URL to a file on github
function! Github()
Py << EOF

import vim
import subprocess
import os, sys, re

def get_cmd_output(cmd):
    return subprocess.check_output(cmd).rstrip().decode('utf-8')

file_name = vim.current.buffer.name
path = os.path.realpath(file_name)

git_branch = get_cmd_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD'])
if '/' in git_branch:
    blob_path = get_cmd_output(['git', 'rev-parse', 'HEAD'])
else:
    blob_path = git_branch
file_path = get_cmd_output(['git', 'ls-tree', '--full-name', '--name-only', 'HEAD', path])
current_line = vim.current.range.start + 1

github_repo_url = get_cmd_output(['hub', 'browse', '-u', '--', 'blob/%s/%s#L%d' % (blob_path, file_path, current_line)])
print(github_repo_url)
EOF
endfunction

" Converts dates from the current line
function! NormalizeDate()
Py << EOF

from dateutil.parser import parse
import vim

vim.current.line = str(parse(vim.current.line).date())
EOF
endfunction

let g:ale_linters = {'go': ['goimports'], 'python': ['flake8', 'pylint']}
let g:ale_fixers = {'go': ['goimports']}
" Converts amounts from the current line
function! NormalizePrice()
Py << EOF

import vim

amount = vim.current.line
amount = float(amount.strip().replace('$', '').replace(',', '').replace('âˆ’', '-'))

sign = '+' if amount < 0 else '-'

vim.current.line = '{}{} USD'.format(sign, abs(amount))
EOF
endfunction

function! ReverseLines()
:%s/\"\n/|/g
:g/^/m0
:%s/|/\"\r/g
endfunction


let g:ale_go_gometalinter_options = '--fast'
let g:terraform_align=1
let g:ale_fix_on_save = 1
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 0

nnoremap gh :call Github()<cr>
nnoremap tt :call NormalizeDate()<cr>
nnoremap $$ :call NormalizePrice()<cr>

autocmd FileType go nmap <leader>gb :<C-u>call <SID>build_go_files()<CR>
autocmd FileType go nmap <leader>gr :GoRun<CR>
autocmd FileType go nmap <leader>gt :GoTest<CR>
autocmd FileType go nmap \|  <Plug>(go-def-vertical)
autocmd FileType go nmap <Leader>gi <Plug>(go-info)
autocmd FileType c,cpp ClangFormatAutoEnable

"COC START

" Set internal encoding of vim, not needed on neovim, since coc.nvim using some
" unicode characters in the file autoload/float.vim
set encoding=utf-8

" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Don't show coc in vim airline
let g:airline#extensions#coc#enabled = 0

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>


" COC END

au BufWritePost *.py !black %
au BufWritePost *.js !prettier --write %
set secure
